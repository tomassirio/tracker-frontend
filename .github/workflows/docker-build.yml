name: Build Docker Images

on:
  workflow_call:
    inputs:
      push-to-registry:
        description: 'Whether to push images to registry'
        required: false
        type: boolean
        default: false
      image-tag:
        description: 'Additional tag for the images'
        required: false
        type: string
        default: ''
      checkout-ref:
        description: 'Git ref to checkout (branch, tag, or commit)'
        required: false
        type: string
        default: ''
    secrets:
      registry-username:
        description: 'Docker registry username'
        required: false
      registry-password:
        description: 'Docker registry password'
        required: false

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout-ref }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          cache: true

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | sed 's/+.*//')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ inputs.push-to-registry }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-password }}

      - name: Build metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/tracker-frontend
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ inputs.image-tag }},enable=${{ inputs.image-tag != '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ inputs.push-to-registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: List built images
        if: ${{ inputs.push-to-registry }}
        run: echo "Images pushed with tags ${{ steps.meta.outputs.tags }}"
