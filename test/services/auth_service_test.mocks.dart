// Mocks generated by Mockito 5.4.4 from annotations
// in tracker_frontend/test/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: depend_on_referenced_packages
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: avoid_implementing_value_types
// ignore_for_file: use_super_parameters

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tracker_frontend/data/client/auth/auth_client.dart' as _i4;
import 'package:tracker_frontend/data/client/query/user_query_client.dart'
    as _i6;
import 'package:tracker_frontend/data/models/auth_models.dart' as _i2;
import 'package:tracker_frontend/data/models/user_models.dart' as _i3;
import 'package:tracker_frontend/data/storage/token_storage.dart' as _i7;

class _FakeAuthResponse_0 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfile_1 extends _i1.SmartFake implements _i3.UserProfile {
  _FakeUserProfile_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthClient extends _i1.Mock implements _i4.AuthClient {
  MockAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AuthResponse> login(_i2.LoginRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#login, [request]),
            returnValue: _i5.Future<_i2.AuthResponse>.value(
              _FakeAuthResponse_0(this, Invocation.method(#login, [request])),
            ),
          )
          as _i5.Future<_i2.AuthResponse>);

  @override
  _i5.Future<_i2.AuthResponse> register(_i2.RegisterRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#register, [request]),
            returnValue: _i5.Future<_i2.AuthResponse>.value(
              _FakeAuthResponse_0(
                this,
                Invocation.method(#register, [request]),
              ),
            ),
          )
          as _i5.Future<_i2.AuthResponse>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.AuthResponse> refresh(_i2.RefreshTokenRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#refresh, [request]),
            returnValue: _i5.Future<_i2.AuthResponse>.value(
              _FakeAuthResponse_0(this, Invocation.method(#refresh, [request])),
            ),
          )
          as _i5.Future<_i2.AuthResponse>);

  @override
  _i5.Future<void> initiatePasswordReset(_i2.PasswordResetRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#initiatePasswordReset, [request]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> completePasswordReset(_i2.PasswordResetRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#completePasswordReset, [request]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> changePassword(_i2.PasswordChangeRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [request]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [UserQueryClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserQueryClient extends _i1.Mock implements _i6.UserQueryClient {
  MockUserQueryClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.UserProfile> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i5.Future<_i3.UserProfile>.value(
              _FakeUserProfile_1(
                this,
                Invocation.method(#getUserById, [userId]),
              ),
            ),
          )
          as _i5.Future<_i3.UserProfile>);

  @override
  _i5.Future<_i3.UserProfile> getUserByUsername(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByUsername, [username]),
            returnValue: _i5.Future<_i3.UserProfile>.value(
              _FakeUserProfile_1(
                this,
                Invocation.method(#getUserByUsername, [username]),
              ),
            ),
          )
          as _i5.Future<_i3.UserProfile>);

  @override
  _i5.Future<_i3.UserProfile> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i5.Future<_i3.UserProfile>.value(
              _FakeUserProfile_1(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i5.Future<_i3.UserProfile>);

  @override
  _i5.Future<List<_i3.UserProfile>> getFriends() =>
      (super.noSuchMethod(
            Invocation.method(#getFriends, []),
            returnValue: _i5.Future<List<_i3.UserProfile>>.value(
              <_i3.UserProfile>[],
            ),
          )
          as _i5.Future<List<_i3.UserProfile>>);

  @override
  _i5.Future<List<dynamic>> getReceivedFriendRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getReceivedFriendRequests, []),
            returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> getSentFriendRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getSentFriendRequests, []),
            returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<_i3.UserProfile>> getFollowing() =>
      (super.noSuchMethod(
            Invocation.method(#getFollowing, []),
            returnValue: _i5.Future<List<_i3.UserProfile>>.value(
              <_i3.UserProfile>[],
            ),
          )
          as _i5.Future<List<_i3.UserProfile>>);

  @override
  _i5.Future<List<_i3.UserProfile>> getFollowers() =>
      (super.noSuchMethod(
            Invocation.method(#getFollowers, []),
            returnValue: _i5.Future<List<_i3.UserProfile>>.value(
              <_i3.UserProfile>[],
            ),
          )
          as _i5.Future<List<_i3.UserProfile>>);
}

/// A class which mocks [TokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenStorage extends _i1.Mock implements _i7.TokenStorage {
  MockTokenStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveTokens({
    required String? accessToken,
    required String? refreshToken,
    required String? tokenType,
    required int? expiresIn,
    String? userId,
    String? username,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveTokens, [], {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #tokenType: tokenType,
              #expiresIn: expiresIn,
              #userId: userId,
              #username: username,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAccessToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#getRefreshToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getTokenType() =>
      (super.noSuchMethod(
            Invocation.method(#getTokenType, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getUserId() =>
      (super.noSuchMethod(
            Invocation.method(#getUserId, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getUsername() =>
      (super.noSuchMethod(
            Invocation.method(#getUsername, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> isAccessTokenExpired() =>
      (super.noSuchMethod(
            Invocation.method(#isAccessTokenExpired, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isLoggedIn, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> clearTokens() =>
      (super.noSuchMethod(
            Invocation.method(#clearTokens, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
