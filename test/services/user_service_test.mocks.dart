// Mocks generated by Mockito 5.4.4 from annotations
// in tracker_frontend/test/services/user_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: depend_on_referenced_packages
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: avoid_implementing_value_types
// ignore_for_file: use_super_parameters

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tracker_frontend/data/client/command/user_command_client.dart'
    as _i5;
import 'package:tracker_frontend/data/client/query/user_query_client.dart'
    as _i3;
import 'package:tracker_frontend/data/models/user_models.dart' as _i2;

class _FakeUserProfile_0 extends _i1.SmartFake implements _i2.UserProfile {
  _FakeUserProfile_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserQueryClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserQueryClient extends _i1.Mock implements _i3.UserQueryClient {
  MockUserQueryClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserProfile> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i4.Future<_i2.UserProfile>.value(
              _FakeUserProfile_0(
                this,
                Invocation.method(#getUserById, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.UserProfile>);

  @override
  _i4.Future<_i2.UserProfile> getUserByUsername(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByUsername, [username]),
            returnValue: _i4.Future<_i2.UserProfile>.value(
              _FakeUserProfile_0(
                this,
                Invocation.method(#getUserByUsername, [username]),
              ),
            ),
          )
          as _i4.Future<_i2.UserProfile>);

  @override
  _i4.Future<_i2.UserProfile> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.UserProfile>.value(
              _FakeUserProfile_0(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i4.Future<_i2.UserProfile>);

  @override
  _i4.Future<List<_i2.UserProfile>> getFriends() =>
      (super.noSuchMethod(
            Invocation.method(#getFriends, []),
            returnValue: _i4.Future<List<_i2.UserProfile>>.value(
              <_i2.UserProfile>[],
            ),
          )
          as _i4.Future<List<_i2.UserProfile>>);

  @override
  _i4.Future<List<dynamic>> getReceivedFriendRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getReceivedFriendRequests, []),
            returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i4.Future<List<dynamic>>);

  @override
  _i4.Future<List<dynamic>> getSentFriendRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getSentFriendRequests, []),
            returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i4.Future<List<dynamic>>);

  @override
  _i4.Future<List<_i2.UserProfile>> getFollowing() =>
      (super.noSuchMethod(
            Invocation.method(#getFollowing, []),
            returnValue: _i4.Future<List<_i2.UserProfile>>.value(
              <_i2.UserProfile>[],
            ),
          )
          as _i4.Future<List<_i2.UserProfile>>);

  @override
  _i4.Future<List<_i2.UserProfile>> getFollowers() =>
      (super.noSuchMethod(
            Invocation.method(#getFollowers, []),
            returnValue: _i4.Future<List<_i2.UserProfile>>.value(
              <_i2.UserProfile>[],
            ),
          )
          as _i4.Future<List<_i2.UserProfile>>);
}

/// A class which mocks [UserCommandClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCommandClient extends _i1.Mock implements _i5.UserCommandClient {
  MockUserCommandClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserProfile> createUser(Map<String, dynamic>? userData) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [userData]),
            returnValue: _i4.Future<_i2.UserProfile>.value(
              _FakeUserProfile_0(
                this,
                Invocation.method(#createUser, [userData]),
              ),
            ),
          )
          as _i4.Future<_i2.UserProfile>);

  @override
  _i4.Future<void> sendFriendRequest(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#sendFriendRequest, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> acceptFriendRequest(String? requestId) =>
      (super.noSuchMethod(
            Invocation.method(#acceptFriendRequest, [requestId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> declineFriendRequest(String? requestId) =>
      (super.noSuchMethod(
            Invocation.method(#declineFriendRequest, [requestId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> followUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#followUser, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> unfollowUser(String? followedId) =>
      (super.noSuchMethod(
            Invocation.method(#unfollowUser, [followedId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
